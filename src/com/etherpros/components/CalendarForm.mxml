<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"  
		 xmlns:components="com.etherpros.components.*"
		 xmlns:model="com.etherpros.model.*" creationComplete="init()"
		 borderAlpha="0" xmlns:ns="http://mate.asfusion.com/">
	
	<s:layout>
		<s:HorizontalLayout horizontalAlign="center" gap="0" />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.etherpros.business.ContractorDAO;
			import com.etherpros.controllers.CalendarController;
			import com.etherpros.events.*;
			import com.etherpros.model.*;
			
			import mx.collections.ArrayCollection;
			import mx.events.CalendarLayoutChangeEvent;
			
			import skins.DriversList;
			
			import spark.components.Label;

			public var currentMonthSelected:int = -1;
			public var currentYearSelected:int = -1;
			
			[Bindable]
			private var weekArray:ArrayCollection;
			
			[Bindable]
			private var jobsController:CalendarController;
			
			[Bindable]
			private var staffDP: ArrayCollection;		
	
			[Bindable]
			private var _contractors:ArrayCollection;

			[Bindable]
			private var _clients:ArrayCollection;
			
			[Bindable]
			private var _rigs:ArrayCollection;
			
			[Bindable]
			private var _projects:ArrayCollection;
			
			private function init():void {
				// set up controlller for rig views.
				jobsController = new CalendarController(this);
				// set the offset based on the position of the first day.
				jobsController.setOffset(calendar.x + 2, calendar.y + calendar.columnHeaderGroup.height);
				CalendarController.setCalendarDimensions(calendar.width, calendar.height - calendar.columnHeaderGroup.height);
			
				// create first initial month grid.
				createDaysGrid();
				
				// Load information from Database.				
				loadData();
			}
			
			private function loadData():void {
				var contractorEvent:ContractorEvent = new ContractorEvent(ContractorEvent.FIND_ALL);
				mateDispatcher.dispatchEvent(contractorEvent);				
				var projectEvent:ProjectEvent = new ProjectEvent(ProjectEvent.FIND_ALL);
				mateDispatcher.dispatchEvent(projectEvent);
				var rigsEvent:RigEvent = new RigEvent(RigEvent.FIND_ALL);
				mateDispatcher.dispatchEvent(rigsEvent);
				var clientEvent:ClientEvent = new ClientEvent(ClientEvent.FIND_ALL);
				mateDispatcher.dispatchEvent(clientEvent);				
			}
			
			/** 
			 * Create grid of days in current month as per current date provided. 
			 */
			private function createDaysGrid():void {				
				// Dispatch monthChanged event which tell item renderers
				// to clear their values.
				dispatchEvent(new Event('monthChanged', true));
				
				// clear out old weeks
				weekArray = new ArrayCollection();
								
				var currentYear:int  = dtPicker.displayedYear;
				var currentMonth:int = dtPicker.displayedMonth;
				var range:DayRange = DayRange.createFromMonth(currentMonth, currentYear);
				
				this.currentMonthSelected = currentMonth;
				this.currentYearSelected = currentYear;
				weekArray = range.weeks;
				jobsController.dayRange = range;
			}	
			
			protected function dtPicker_changeHandler(event:CalendarLayoutChangeEvent):void {
				if ( currentMonthSelected != dtPicker.displayedMonth ){
					createDaysGrid();
				}else if ( currentYearSelected != dtPicker.displayedYear ){
					createDaysGrid();
				}
	
			}
			
			protected function dtPicker_clickHandler(event:MouseEvent):void {
				if ( currentMonthSelected != dtPicker.displayedMonth ){
					createDaysGrid();
				}else if ( currentYearSelected != dtPicker.displayedYear ){
					createDaysGrid();
				}
				
			}
			
			protected function saveJobs(event:MouseEvent):void {
				for each(var job:Job in this.jobsController.jobs){
					var jobAssignmentEvent:JobAssignmentEvent = new JobAssignmentEvent( JobAssignmentEvent.JOB_ASSIGNMENT_SAVE );
					jobAssignmentEvent.job = job;
					mateDispatcher.dispatchEvent(jobAssignmentEvent);
				}
				
			}	
			
			[Bindable]
			public function set contractors(value:ArrayCollection):void {
				_contractors = value;
			}
			
			public function get contractors():ArrayCollection { 
				return _contractors;
			}
			
			[Bindable]
			public function get clients():ArrayCollection { 
				return _clients; 
			}
			
			public function set clients(value:ArrayCollection):void {				
				_clients = value;
			}

			[Bindable]
			public function get rigs():ArrayCollection {
				return _rigs;
			}

			public function set rigs(value:ArrayCollection):void {
				_rigs = value;
			}

			[Bindable]
			public function get projects():ArrayCollection {
				return _projects;
			}

			public function set projects(value:ArrayCollection):void {
				_projects = value;
			}


		]]>
	</fx:Script>
	<fx:Declarations>
		<ns:Dispatcher id="mateDispatcher" />
	</fx:Declarations>
	
	<!-- Left Column -->
	<components:MainColumn>		
		<components:TitleBox label="Clients" />
		<s:List id="clientsList" width="100%" height="200" 
				skinClass="skins.DriversList" dataProvider="{ clients }">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer height="28">
						<fx:Script>
							<![CDATA[
								import com.etherpros.model.Client;
								import com.etherpros.model.Contractor;
							]]>
						</fx:Script>
						<s:Label text="{Client(data).ClientName}" verticalCenter="0" horizontalCenter="0" 
								 fontFamily="Frutiger" color="#555555" fontSize="14" />	
					</s:ItemRenderer>					
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		
		<s:Spacer height="5" />
		
		<components:TitleBox label="Projects" />
		<s:List id="projectsList" width="100%" height="200" 
				skinClass="skins.DriversList" dataProvider="{ projects }">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer height="28">
						<fx:Script>
							<![CDATA[
								import com.etherpros.model.Project;
							]]>
						</fx:Script>
						<s:Label text="{Project(data).ProjName}" verticalCenter="0" horizontalCenter="0" 
								 fontFamily="Frutiger" color="#555555" fontSize="14" />	
					</s:ItemRenderer>					
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		
		<s:Spacer height="5" />
		<components:TitleBox label="Rigs" />
		<s:List id="rigsList" width="100%" height="145" 
				skinClass="skins.DriversList" dataProvider="{rigs}">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer height="28">
						<fx:Script>
							<![CDATA[
								import com.etherpros.model.Rig;
							]]>
						</fx:Script>
						<s:Label text="{Rig(data).RigName}" verticalCenter="0" horizontalCenter="0" 
								 fontFamily="Frutiger" color="#555555" fontSize="14" />	
					</s:ItemRenderer>					
				</fx:Component>
			</s:itemRenderer>
		</s:List>		
	</components:MainColumn>
	
	<!-- Middle Calendar -->
	<s:Group id="calendarContainer">
		<components:Calendar id="calendar" dataProvider="{weekArray}" />	
	</s:Group>
	
	<!-- Right Column -->
	<components:MainColumn>
		<components:TitleBox label="Date Picker" />
		
		<mx:DateChooser id="dtPicker" height="31" enabled="true" showToday="false"
						change="dtPicker_changeHandler(event)" click="dtPicker_clickHandler(event)" 
						yearNavigationEnabled="true"/>
		<s:Button id="btnSaveJobs" label="Save Jobs" click="saveJobs(event)"/>
		
		<s:Spacer height="30" />
		
		<components:TitleBox label="Drivers" />				
		<s:List id="staffList" width="100%" height="100%" dragEnabled="true" 
				dropEnabled="false" skinClass="skins.DriversList" dataProvider="{ contractors }">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer height="28">
						<fx:Script>
							<![CDATA[
								import com.etherpros.model.Contractor;
							]]>
						</fx:Script>
						<s:Label fontFamily="Frutiger" color="#555555" fontSize="17" 
								 text="{Contractor(data).FullName}" verticalCenter="0" horizontalCenter="0" />	
					</s:ItemRenderer>					
				</fx:Component>
			</s:itemRenderer>
		</s:List>
	</components:MainColumn>
		
</s:BorderContainer>
