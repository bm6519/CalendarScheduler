<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"  
		 xmlns:components="com.etherpros.components.*"
		 xmlns:model="com.etherpros.model.*" creationComplete="init()"
		 borderAlpha="0">
	
	<s:layout>
		<s:HorizontalLayout horizontalAlign="center" />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.etherpros.controllers.RigsController;
			import com.etherpros.events.RigCreationEvent;
			import com.etherpros.events.RigEvent;
			import com.etherpros.model.*;
			import com.etherpros.utils.CommonUtils;
			
			import flashx.textLayout.elements.ListItemElement;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.core.DragSource;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import skins.DriversList;
			
			import spark.components.Label;
			import spark.events.GridEvent;
			
			[Bindable]
			private var weekArray:ArrayCollection;
			
			private var rigsController:RigsController;
			[Bindable]
			private var staffDP: ArrayCollection;
			
			public var currentMonthSelected:int = -1;
			public var currentYearSelected:int = -1;
			
			private function init():void {
				// set up controlller for rig views.
				rigsController = new RigsController(this);
				// set the offset based on the position of the first day.
				rigsController.setOffset(grdCalendar.x + 2, grdCalendar.y + grdCalendar.columnHeaderGroup.height);
				RigsController.setCalendarDimensions(grdCalendar.width, grdCalendar.height - grdCalendar.columnHeaderGroup.height);
			
				// create first initial month grid.
				createDaysGrid();
				initStaffList();
				this.addEventListener(RigCreationEvent.ADD_NEW_RIG,addRigView);				
			}
			
			// create grid of days in current month as per current date provided
			private function createDaysGrid():void
			{
				// Dispatch monthChanged event which tell item renderers
				// to clear their values.
				dispatchEvent(new Event('monthChanged', true));
				
				weekArray = new ArrayCollection();
				var currentYear:int  = dtPicker.displayedYear;
				var currentMonth:int = dtPicker.displayedMonth;
				this.currentMonthSelected = currentMonth;
				this.currentYearSelected = currentYear;
				// always assume that first day of a month will have date as 1
				// currentMonth and currentYear are supplied by main.mxml file		
				var objDate:Date = new Date(currentYear, currentMonth, 1);
				
				// get total days count for currentMonth in currentYear
				var intTotalDaysInMonth:int = CommonUtils.getDaysCount(currentMonth, currentYear);
				var i:int;
				var arrDays:Array =  CommonUtils.getArrayDays(objDate, currentYear, currentMonth, intTotalDaysInMonth);
				//var arrDaysPreviousMonth:Array =  CommonUtils.getArrayDays(objDate, currentYear, currentMonth-1, intTotalDaysInMonth);
				var weekDay:Day;
				var currentWeek:Week;
				
				var weekDays:Array = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'];
				var currentWeekIndex:int = 0;
				monthloop:
				for(i=0; i<arrDays.length; i = i + 7)
				{
					if(i % 7 == 0){
						currentWeek = new Week();
					}				
					
					for(var j:int=0; j < weekDays.length; j++) {
						if(arrDays[i+j] == null) {
							weekArray.addItem(currentWeek);
							continue monthloop;							
						}
						
						weekDay = new Day();
						if ( weekDays[j] == 'sunday' ){
							weekDay.isBeginDayWeek = true;							
						}
						if ( weekDays[j] == 'saturday' ){
							weekDay.isEndDayWeek = true;							
						}
						weekDay.dayNumber = arrDays[i+j].dayNumber as int;
						weekDay.dayName = arrDays[i+j].dayName as String;
						weekDay.date = arrDays[i+j].date as Date;
						weekDay.isOtherMonth = arrDays[i+j].isOtherMonth as Boolean;						
						currentWeek[ weekDays[j] ] = weekDay;
					}
					
					weekArray.addItem(currentWeek);
					currentWeekIndex++;	
				}
				
				var dayRange:DayRange = new DayRange(weekArray);
				rigsController.dayRange = dayRange;
				
				initSelectedMonth();
			}	
			
			protected function dtPicker_changeHandler(event:CalendarLayoutChangeEvent):void
			{
				if ( currentMonthSelected != dtPicker.displayedMonth ){
					clearCalendarGrid();
					createDaysGrid();
				}else if ( currentYearSelected != dtPicker.displayedYear ){
					clearCalendarGrid();
					createDaysGrid();
				}
				
			}
			
			protected function dtPicker_clickHandler(event:MouseEvent):void
			{
				if ( currentMonthSelected != dtPicker.displayedMonth ){
					clearCalendarGrid();
					createDaysGrid();
				}else if ( currentYearSelected != dtPicker.displayedYear ){
					clearCalendarGrid();
					createDaysGrid();
				}
				
			}
			
			private function  initSelectedMonth():void {
				
				/*
				
				var monthKey:String = dtPicker.displayedYear + "-" + dtPicker.displayedMonth;
				var rigByMonth:Array =  rigsController.getRigByMonth(monthKey);
				for each  (var _rigDetail:Rig in rigByMonth){
					rigsController.reDrawRig(_rigDetail );	
				}
				
				*/
				
			}
			/**
			 * Function for cleaning the rigs from the calendar and stores the rigs in a temp array
			 * */
			private function clearCalendarGrid():void {
				// rigsController.clearRigViews();				
			}
			
			protected function addRigView(event:RigCreationEvent):void {
				// if dragging into a valid week.
				if ( event.weekDay && event.weekDay.dayNumber != -1 ) {
					
					var rigDetail:Rig = new Rig();					
					rigDetail.staff = event.staffRig;
					rigDetail.startDay = event.weekDay;
					rigsController.createRig(rigDetail);
					
				}				
			}
					
			private function initStaffList():void {
				var staff:Staff = new Staff();				
				staffDP = new ArrayCollection();
				staff.name ="Andrew Dimon";
				staffDP.addItem(staff);
				staff = new Staff();
				staff.name ="Bob Evers";
				staffDP.addItem(staff);
				staff = new Staff();
				staff.name ="Bruce Dejardine";
				staffDP.addItem(staff);
				staff = new Staff();
				staff.name ="Carl Dejardine";
				staffDP.addItem(staff);
				staff = new Staff();
				staff.name ="Chris Martin";
				staffDP.addItem(staff);				
				staffList.dataProvider = staffDP;
			}
			
			[Bindable]
			public static var COLUMN_WIDTH:int = 146;
		]]>
	</fx:Script>
	<s:Group id="gridContainer">

		<s:DataGrid id="grdCalendar" width="1024" height="766" dataProvider="{weekArray}"
					requestedRowCount="4" rowHeight="123" selectionMode="none">			
			<s:columns>
				<s:ArrayList>
					<s:GridColumn width="{COLUMN_WIDTH}" dataField="sunday" headerText="Sunday" resizable="false"
								  sortable="false" itemRenderer="com.etherpros.components.DayView">
					</s:GridColumn>
					<s:GridColumn width="{COLUMN_WIDTH}" dataField="monday" headerText="Monday" resizable="false"
								  sortable="false" itemRenderer="com.etherpros.components.DayView">
					</s:GridColumn>
					<s:GridColumn width="{COLUMN_WIDTH}" dataField="tuesday" headerText="Tuesday"
								  resizable="false" sortable="false" itemRenderer="com.etherpros.components.DayView">
					</s:GridColumn>
					<s:GridColumn width="{COLUMN_WIDTH}" dataField="wednesday" headerText="Wednesday"
								  resizable="false" sortable="false" itemRenderer="com.etherpros.components.DayView">
					</s:GridColumn>
					<s:GridColumn width="{COLUMN_WIDTH}" dataField="thursday" headerText="Thursday"
								  resizable="false" sortable="false" itemRenderer="com.etherpros.components.DayView">
					</s:GridColumn>
					<s:GridColumn width="{COLUMN_WIDTH}" dataField="friday" headerText="Friday" resizable="false"
								  sortable="false" itemRenderer="com.etherpros.components.DayView">
					</s:GridColumn>
					<s:GridColumn width="{COLUMN_WIDTH}" dataField="saturday" headerText="Saturday"
								  resizable="false" sortable="false" itemRenderer="com.etherpros.components.DayView">
					</s:GridColumn>
				</s:ArrayList>
			</s:columns>			
		</s:DataGrid>
	
	</s:Group>

	<s:VGroup width="250" horizontalAlign="center" paddingLeft="20" paddingRight="20" paddingTop="10" gap="15">
		<components:TitleBox label="Date Picker" />
		
		<mx:DateChooser id="dtPicker" height="31" enabled="true" showToday="false"
						change="dtPicker_changeHandler(event)" click="dtPicker_clickHandler(event)" 
						yearNavigationEnabled="true"/>
		
		<s:Spacer height="30" />
		
		<components:TitleBox label="Drivers" />
		<s:List id="staffList" width="100%" dragEnabled="true" 
				dropEnabled="false" skinClass="skins.DriversList">
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer height="35">
						<s:Label fontFamily="Frutiger" color="#555555" fontSize="20" text="{data.name}" verticalCenter="0" horizontalCenter="0" />	
					</s:ItemRenderer>					
				</fx:Component>
			</s:itemRenderer>
		</s:List>
	</s:VGroup>
		
</s:BorderContainer>
