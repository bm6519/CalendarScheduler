<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"  
		 xmlns:components="com.etherpros.components.*"
		 xmlns:model="com.etherpros.model.*" creationComplete="init()"
		 borderAlpha="0" xmlns:ns="http://mate.asfusion.com/">
	
	<s:layout>
		<s:HorizontalLayout horizontalAlign="center" gap="0" />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.etherpros.business.loaders.ContractorDAO;
			import com.etherpros.controllers.CalendarController;
			import com.etherpros.controllers.PopupsController;
			import com.etherpros.events.*;
			import com.etherpros.model.*;
			import com.etherpros.model.data.*;
			
			import mx.collections.ArrayCollection;
			import mx.events.CalendarLayoutChangeEvent;
			
			import skins.DriversList;
			import skins.NonSelectableItemRenderer;
			
			import spark.components.Label;
			import spark.events.IndexChangeEvent;

			public var currentMonthSelected:int = -1;
			public var currentYearSelected:int = -1;

			[Bindable]
			private var _controller:CalendarController;
			private var popupsController:PopupsController;
			
			[Bindable]
			private var weekArray:ArrayCollection;
				
			[Bindable]
			private var staffDP: ArrayCollection;		
			
			private var _jobAssignments:ArrayCollection;
			
			private var bContractorsLoaded:Boolean;
			private var bClientsLoaded:Boolean;
			private var bRigsLoaded:Boolean;
			private var bProjectsLoaded:Boolean;
			
			private function init():void {				
				// set up controlller for rig views.
				_controller.container = this;
				// set the offset based on the position of the first day.
				_controller.setOffset(calendar.x + 2, calendar.y + calendar.columnHeaderGroup.height);
				CalendarController.setCalendarDimensions(calendar.width, calendar.height - calendar.columnHeaderGroup.height);
			
				popupsController = new PopupsController(this);
				
				// create first initial month grid.
				createDaysGrid();
				
				// Load information from Database.				
				loadData();
				
			}
						
			private function loadData():void {
				// block user from interaction while everything is loaded.
				popupsController.showLoading();
				
				var contractorEvent:ContractorEvent = new ContractorEvent(ContractorEvent.FIND_ALL);
				mateDispatcher.dispatchEvent(contractorEvent);				
				var projectEvent:ProjectEvent = new ProjectEvent(ProjectEvent.FIND_ALL);
				mateDispatcher.dispatchEvent(projectEvent);
				var rigsEvent:RigEvent = new RigEvent(RigEvent.FIND_ALL);
				mateDispatcher.dispatchEvent(rigsEvent);
				var clientEvent:ClientEvent = new ClientEvent(ClientEvent.FIND_ALL);
				mateDispatcher.dispatchEvent(clientEvent);
			}
			
			private function loadJobs():void {
				dispatchEvent(new NotifyEvent(NotifyEvent.SHOW, "Loading assignments."));			
			}
			
			private function jobsLoaded(event:Event=null):void {
				dispatchEvent(new NotifyEvent(NotifyEvent.HIDE));
			}
			
			/** 
			 * Create grid of days in current month as per current date provided. 
			 */
			private function createDaysGrid():void {				
				// Dispatch monthChanged event which tell item renderers
				// to clear their values.
				dispatchEvent(new Event('monthChanged', true));
				
				// clear out old weeks
				weekArray = new ArrayCollection();
								
				var currentYear:int  = dtPicker.displayedYear;
				var currentMonth:int = dtPicker.displayedMonth;
				var range:DayRange = DayRange.createFromMonth(currentMonth, currentYear);
				
				this.currentMonthSelected = currentMonth;
				this.currentYearSelected = currentYear;
				weekArray = range.weeks;				
				_controller.dayRange = range;
			}	
			
			protected function dtPicker_clickHandler(event:MouseEvent):void {
				if ( currentMonthSelected != dtPicker.displayedMonth ||  currentYearSelected != dtPicker.displayedYear ){
					createDaysGrid();
					loadJobs();
				}			
			}
			
			protected function saveJobs(event:MouseEvent):void {
				var jobs:ArrayCollection = _controller.jobs;
				
				for each(var job:Job in _controller.jobs){
					if(job.dirty || !job.persisted) {
						var jobAssignmentEvent:JobAssignmentEvent = new JobAssignmentEvent( JobAssignmentEvent.JOB_ASSIGNMENT_SAVE );
						jobAssignmentEvent.job = job;
						mateDispatcher.dispatchEvent(jobAssignmentEvent);
					}
				}
				
			}
			
			private function contractorsLoaded(event:Event):void {
				bContractorsLoaded = true;
				checkIfFullyLoaded();
			}
			
			private function rigsLoaded(event:Event):void {
				bRigsLoaded = true;
				checkIfFullyLoaded();
			}
			
			private function clientsLoaded(event:Event):void {
				bClientsLoaded = true;
				checkIfFullyLoaded();
			}
			
			private function projectsLoaded(event:Event):void {
				bProjectsLoaded = true;
				checkIfFullyLoaded();
			}
			
			private function checkIfFullyLoaded():void {
				// if all tables have been loaded, close loading popup.
				if(bProjectsLoaded && bClientsLoaded && bRigsLoaded && bContractorsLoaded) {
					popupsController.hideLoading();
					
					// load jobs.
					loadJobs();
				}
			}
			
			// ===================
			// Getters and Setters
			// ===================

			[Bindable]
			public function get controller():CalendarController {
				return _controller;
			}
			public function set controller(controller:CalendarController):void {
				_controller = controller;
			}			
			
			protected function selectedClientChanged(event:IndexChangeEvent):void
			{
				this.controller.updateProjectList();				
			}
			
			protected function selectedProjectChanged(event:IndexChangeEvent):void
			{
				this.controller.updateDisplayedJobs();			
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<ns:Dispatcher id="mateDispatcher" />
		<ns:Listener type="{RigEvent.FIND_ALL_DONE}" method="rigsLoaded" />
		<ns:Listener type="{ProjectEvent.FIND_ALL_DONE}" method="projectsLoaded" />
		<ns:Listener type="{ClientEvent.FIND_ALL_DONE}" method="clientsLoaded" />
		<ns:Listener type="{ContractorEvent.FIND_ALL_DONE}" method="contractorsLoaded" />
		<ns:Listener type="{JobAssignmentEvent.FIND_ALL_DONE}" method="jobsLoaded" />
	</fx:Declarations>
	
	<!-- Left Column -->
	<components:MainColumn>		
		<components:TitleBox label="Clients" />
		<s:List id="clientsList" width="100%" height="200"
				itemRenderer="com.etherpros.components.listrenderers.ClientsListItem"
				skinClass="skins.DriversList" change="selectedClientChanged(event)"/>

		
		<s:Spacer height="5" />
		
		<components:TitleBox label="Projects" />
		<s:List id="projectsList" width="100%" height="200" 
				itemRenderer="com.etherpros.components.listrenderers.ProjectsListItem"
				skinClass="skins.DriversList"  change="selectedProjectChanged(event)"/>

		
		<s:Spacer height="5" />
		<components:TitleBox label="Rigs" />
		<s:List id="rigsList" width="100%" height="145"
				itemRenderer="com.etherpros.components.listrenderers.RigsListItem"
				skinClass="skins.DriversList" dataProvider="{ controller.rigs }" />

	</components:MainColumn>
	
	<!-- Middle Calendar -->
	<s:Group id="calendarContainer">
		<components:Calendar id="calendar" dataProvider="{weekArray}" />	
	</s:Group>
	
	<!-- Right Column -->
	<components:MainColumn>
		<components:TitleBox label="Date Picker" />		
		<mx:DateChooser id="dtPicker" height="31" 
						yearNavigationEnabled="true" enabled="true" showToday="false"
						click="dtPicker_clickHandler(event)" 
						/>		
		<s:Button id="btnSaveJobs" label="Save Jobs" click="saveJobs(event)"/>
		
		<s:Spacer height="30" />
		
		<components:TitleBox label="Contractors" />				
		<s:List id="staffList" width="100%" height="100%" dragEnabled="true" dropEnabled="false"  
				itemRenderer="com.etherpros.components.listrenderers.ContractorsListItem"
				skinClass="skins.DriversList" dataProvider="{ controller.contractors }" />

	</components:MainColumn>
		
</s:BorderContainer>
